From 98cd40e1e0e0e333ade729fab7e59c3fea6e868e Mon Sep 17 00:00:00 2001
From: Steven Barker <steven.barker@gizmite.com>
Date: Sun, 15 May 2016 23:47:15 +1000
Subject: [PATCH] gpio rfkiller with devicetree support

Signed-off-by: Steven Barker <steven.barker@gizmite.com>

diff --git a/net/rfkill/rfkill-gpio.c b/net/rfkill/rfkill-gpio.c
index 76c01cb..2c0db66 100644
--- a/net/rfkill/rfkill-gpio.c
+++ b/net/rfkill/rfkill-gpio.c
@@ -26,6 +26,7 @@
 #include <linux/slab.h>
 #include <linux/acpi.h>
 #include <linux/gpio/consumer.h>
+#include <linux/of_gpio.h>
 
 struct rfkill_gpio_data {
 	const char		*name;
@@ -85,6 +86,19 @@ static int rfkill_gpio_acpi_probe(struct device *dev,
 					 acpi_rfkill_default_gpios);
 }
 
+static int rfkill_gpio_dt_probe(struct device *dev,
+					struct rfkill_gpio_data *rfkill)
+{
+	struct device_node *np = dev->of_node;
+
+	rfkill->name = np->name;
+	of_property_read_string(np, "rfkill-name", &rfkill->name);
+	of_property_read_u32(np, "rfkill-type", &rfkill->type);
+
+	return 0;
+
+}
+
 static int rfkill_gpio_probe(struct platform_device *pdev)
 {
 	struct rfkill_gpio_data *rfkill;
@@ -108,6 +122,10 @@ static int rfkill_gpio_probe(struct platform_device *pdev)
 		ret = rfkill_gpio_acpi_probe(&pdev->dev, rfkill);
 		if (ret)
 			return ret;
+	} else if (&pdev->dev.of_node) {
+		ret = rfkill_gpio_dt_probe(&pdev->dev, rfkill);
+		if (ret)
+			return ret;
 	}
 
 	rfkill->clk = devm_clk_get(&pdev->dev, NULL);
@@ -168,12 +186,18 @@ static const struct acpi_device_id rfkill_acpi_match[] = {
 MODULE_DEVICE_TABLE(acpi, rfkill_acpi_match);
 #endif
 
+static const struct of_device_id rfkill_of_match[] = {
+	{ .compatible = "rfkill-gpio", },
+	{},
+};
+
 static struct platform_driver rfkill_gpio_driver = {
 	.probe = rfkill_gpio_probe,
 	.remove = rfkill_gpio_remove,
 	.driver = {
 		.name = "rfkill_gpio",
 		.acpi_match_table = ACPI_PTR(rfkill_acpi_match),
+		.of_match_table = of_match_ptr(rfkill_of_match),
 	},
 };
 
-- 
2.1.4

